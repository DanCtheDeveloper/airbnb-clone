/*
@date : 2014-8-8
@info : JS公共部分
*/
define(["com/config", "libs/htable", "libs/highcharts", "libs/halert", "libs/htemplate", "libs/picker","libs/htree","libs/hdialog"], function(_config){

	return {
    	//通用ajax工具(url,data,type,cb,wait,btn)
		ajax:function(options){
			if($("#mini_load").length===0){$("body").prepend('<div id="mini_load"></div><div class="ajax-bg"></div>');}
			var $mload = $("#mini_load");
			$mload.html('数据加载中......').fadeIn(300);
			if(options.wait){$mload.siblings(".ajax-bg").show();}
			if(options.btn){options.btn.addClass("disabled");}
			options.data = options.data || {};
			if(_config.AK){options.data.appkey = _config.AK;}
			$.ajax({
			    url:options.url,
			    data:options.data,
			    dataType:"json",
			    cache:false,
			    //timeout:5000,
			    type: (options.type == undefined) ? "POST" : options.type,
			    error:function(XMLHttpRequest, textStatus, errorThrown){
				    $mload.html('数据加载失败');
				    if(options.wait){$mload.siblings(".ajax-bg").hide();}
				    if(options.btn){options.btn.removeClass("disabled");}
				    window.setTimeout(function(){$("#mini_load").stop().fadeOut(300);},2000);
				    if(typeof options.err === 'function'){options.err();}
				    //$("body").append('<div class="serr-bg"></div><div class="s-err s-err2"><p>您的刷新过于频繁！</p><div class="s-err-1"><a class="bt serr-pf">确定</a></div></div>');
			    },
			    success:function(result,b,c){
				    if(options.wait){$mload.siblings(".ajax-bg").hide();}
				    if(options.btn){options.btn.removeClass("disabled");}
				    if(!result){return;}
				    if(result.code == 200){
					    $mload.html(options.mes || '数据加载成功');
					    window.setTimeout(function(){$("#mini_load").stop().fadeOut(200);},1000);
				  	    if(typeof options.cb === 'function'){
				  		    options.cb(result);
				  	    }
				    }else if(result.code == 401){
					    $mload.stop().fadeOut(200);
					    $.alert({
						    message : '登录失效，请返回登录页面',
						    bt1 : '确定',
						    bt2 : '取消',
						    fn1 : function(){
							    window.location = ctx_ForJs + '/login';
						    }
					    });
				    }else{
					    $mload.stop().fadeOut(200);
					    if(!$("body").children(".halert").length){
					    	$.alert(result.message);
					    }
				    }
				    $mload = null;
			    }
			});
	   	},   //end ajax

		//得到地址栏get变量
		getUrlValue:function(key){
		    var svalue = location.search.match(new RegExp("[\?\&]" + key + "=([^\&]*)(\&?)","i"));
			return svalue ? svalue[1] : svalue;
    	},

    	//得到hash值
    	getHashValue : function(key){
    		var svalue = location.hash.match(new RegExp("[\#\&]" + key + "=([^\&]*)(\&?)","i"));
			return svalue ? svalue[1] : svalue;
    	},

		/*
		*表单数据提取/填充
		*参数：$elem-表单ID或者表单的jq对象；_hdata-为false时提取数据(默认),为object-填充数据,_clear-是否强制清空，默认否(如果_clear为值，则用此值替换需要清空的地方)
		*/
		hform:function($elem, _hdata, _clear, _fns){
			$elem = typeof $elem == 'string' ? $("#" + $elem) : $elem;
			if(!$elem.length){return {};}
			var pdata = _hdata || {};	//要装载的数据
			var dd = {};	//要输出的数据
			var _htype = (_hdata || _clear || _fns) ? true : false;	//true-fill false-send
			$elem.find("input,select,textarea"+(_htype ? (",.hform") : "")).each(function(){
				var self = $(this);
				var name = this.name || self.attr("name");
				if( !name || (_htype && typeof(pdata[name]) == 'undefined' && !_clear) ){return;}
				if(_htype){
					var value = pdata[name];
					if(!value && isNaN(value)){value = _clear === true ? '' : _clear;}
				}
				switch (this.type){
					case "text":
					case "password":
					case "hidden":
					case "textarea":
						if(_htype){self.val(value);}	//fill
						else{dd[name] = $.trim(self.val());}	//send
						break;
					case "radio":
						if(_htype){			//fill
							if(value == self.val()){self.attr("checked",true);}
						}else{				//send
							if(self.attr("checked")){dd[name] = self.val();}
						}
						break;
					case "checkbox":
						if(_htype){	//fill
							if(!$.isArray(value)){value = String(value).split(',');}   //支持逗号隔开和数组两种格式
							if(String.prototype.indexOf.call(['',value,''],','+self.val()+',') > -1){
								self[0].checked = true;
							}else{
								self[0].checked = false;
							}
						}else{	//send
							if(self.prop("checked")){
								//checkbox以数组形式发送，可修改
								//dd[name] = dd[name] || [];
								//dd[name].push(self.val());
								//以字符串形式
								if(!dd[name] && dd[name] !== 0){
									dd[name] = self.val();
								}else{
									dd[name] += self.val();
								}
							}
						}
						break;
					default:
						if(_htype){	//fill
							if(this.tagName == 'SELECT'){
								self.val(value);
							}else{
								var fn = self.attr("fn");
								var ve = (fn && typeof _fns === 'object' && typeof _fns[fn] === 'function') ? _fns[fn](value, pdata, self) : value;
								self.html(ve);
							}
						}else{
							dd[name] = self.val();	//send状态下只有select
						}

				}
			});
			if(_htype){return $elem;}
			else{return dd;}

		},	//end hform

		//HTML编码
		encodeHTML:function(text) {
            return String(text).replace(/["<>& ]/g, function(all) {
                return "&" + {
                    '"': 'quot',
                    '<': 'lt',
                    '>': 'gt',
                    '&': 'amp',
                    ' ': 'nbsp'
                } [all] + ";";
            });
        },

		//重置表单
		formReset:function(id){
			var $fm = id[0] ? id : $("#" + id);
			$fm.find("input[type=text],textarea").val('');
			$fm.find("select>option:first").attr('selected',true);
			$fm.find("input[type=checkbox]").attr("checked",false);
		},

	    //下载
	    download : function(url, data, method, fileName){
    	    if( url && data ){
    	        data = typeof data == 'string' ? data : jQuery.param(data);
				// add by chufucun 2014-07-29 deserialize Resolve character encoding
    	    	data = data.replace(/\+/g," "); // 解决jquery 序列化后空格变'+'号的问题。
    	        data = decodeURIComponent(data);
    	        var inputs = '';
    	        jQuery.each(data.split('&'), function(){
    	            var pair = this.split('=');
    	            inputs+='<input type="hidden" name="'+ pair[0] +'" value="'+ pair[1] +'" />';
    	        });
    	        inputs += fileName ? '<input type="hidden" name="filename" value="'+ fileName +'" />' : '';
    	        jQuery('<form action="'+ url +'" method="'+ (method||'post') +'">'+inputs+'</form>').appendTo('body').submit().remove();
    	    };
	    },

	    //修改?提示内容
	    ModifyTS : function(arrsm,num){
	    	 //当切换‘一级货币’和‘二级货币’时，修改?提示内容
	    	if(num==1)
	    		{
	    			var arrstr='';
	    			$.each(arrsm, function(i, j){
	    				if(!j){return;}
	    				j = j.split('：');
	    				if(j.length === 1){j.unshift('');}
	    				arrstr += '<b>'+j.shift()+'</b><p>'+j.join('：')+'</p>';
	    			});
	    			return arrstr;
	    		}
	    },

	    //日期转时间戳
	    dbTime : function(sdate,edate){
	    	if(arguments.length === 1){
	    		return new Date( arguments[0].replace(/-/g,'/') ).getTime();
	    	}else if(arguments.length > 1){
	    		var sdate = new Date( arguments[0].replace(/-/g,'/') ).getTime();
	    		var edate = new Date( arguments[1].replace(/-/g,'/') ).getTime();
	    		if(!sdate || !edate || sdate > edate){
	    			return false;
	    		}else{
	    			return true;
	    		}
	    	}
	    },

	    //计算当前时间
	    getDate : function(sp){
	    	sp = sp || '-';
	    	var date = new Date();
	    	return date.getFullYear() + sp + (date.getMonth()+1) + sp + date.getDate();
	    },

	   //绘制图形快 {dom:xx, asyn:false, cb:xx, ajax:{}, chartOpt:{}, tableOpt:{}}, asyn - 是否为异步模式
	   drawBlocks : function(options, asyn){
		   	if(!options){return;}
			if(!$.isArray(options)){options = [options];}
			var _fns = this;
			//hightChart默认参数
			var chartOpt = {
			    chart: {
			        type: 'spline'	//column
			    },
			    title: {
			        text: ''
			    },
			    credits : false,
			    xAxis: {
			        categories: ['一月', '二月', '三月', '四月', '五月', '六月','七月', '八月', '九月', '十月', '十一月', '十二月'],
			    	labels: {}
			    },
			    yAxis: {
			        title: {
			            text: ''
			        },
			        //type:'logarithmic',
				    min: 0
			    },
			    /*legend : {
					layout : 'vertical',
					align : 'right',
					verticalAlign : 'middle',
					borderWidth : 0
				},*/
			    tooltip: {
			        crosshairs: true,
			        shared: true
			    }
			};
			//表格默认参数
			var tableOpt = {
				page : true,
				fakePage : true,
				pageSize : 10,
				order : true
				//fixHeight : 265	//默认高度
			};
			//绘制单个(节点，索引，强制刷新)
			var drawChart = function(dom, eq, qz){
				qz = qz || false;
				eq = eq || 0;
				var data = dom.data("data")[eq];
				if(!data || !data.re){alert('ajax数据未存入');return;}
				if(!data.copt || qz){
					var opt = $.extend(true, {}, chartOpt, data.opt.chartOpt || {});
					opt.series = [];
					if(data.opt.xKeys){
						if(!$.isArray(data.opt.xKeys)){data.opt.xKeys = [data.opt.xKeys];}
						var xb = opt.xAxis || {};
						xb = $.extend(xb, {categories : []});
						opt.xAxis = [];
						$.each(data.opt.xKeys, function(){
							opt.xAxis.push(xb);
						});
						xb = null;
					}
					$.each(data.opt.yKeys, function(m, n){
						if(n.key){
							opt.series.push({
								id : n.key,
								name : n.name || '',
								marker : n.marker || {symbol: 'circle'},
								//type : n.type || undefined,
								anti : n.anti || undefined,
								data : []
							});
							opt.series[opt.series.length - 1] = $.extend(opt.series[opt.series.length - 1], n);
						}
					});
					$.each(data.re.data[data.opt.resultKey||'result'], function(k, v){
						$.each(opt.series, function(m, n){
							var def = data.opt.sutZero == false ? null : 0;
							if(n.anti){
								n.data[k] = -v[n.id] || def;
								if(data.opt.sutZero === 0){n.data[k] = (v[n.id] || v[n.id] === 0) ? -v[n.id] : def;}
							}else{
								n.data[k] = v[n.id] || def;
								if(data.opt.sutZero === 0){n.data[k] = (v[n.id] || v[n.id] === 0) ? v[n.id] : def;}
							}
						});
						if(data.opt.xKeys){
							$.each(opt.xAxis, function(o, p){
								p.categories.push(v[data.opt.xKeys[o]]);
								// add by chufucn 2014-09-09 X轴的间隔过多的问题(默认为10，因为有top10)
								try {
									var len = p.categories.length;
									if(len > 10 && data.opt.autoStep !== false){
										// 判断是否存在跳步渲染
										if(p.labels){
											if(!p.labels.step || p.labels.custom){
												p.labels.step = Math.round(len / 10);
												p.labels.custom = true;
											}
											if(len > 15){
												p.labels.rotation = 16;
											}
										}
									}
								} catch (e) {}
								// add end
							});
						}
					});
					if(typeof data.opt.dataFormat === 'function'){opt = data.opt.dataFormat(opt);}
					data.copt = opt;
				}
				//console.log(data)
				data.highObj = dom.children(".draw-box:first").children(".hb-draw:first").highcharts(data.copt);
				if(typeof data.opt.cb === 'function'){data.opt.cb(data, {type:'qs',eq:eq});}
			};
			//绘制表格(节点，索引，强制刷新)
			var drawTable = function(dom, eq, qz){
				qz = qz || false;
				eq = eq || 0;
				var data = dom.data("data")[eq];
				if(!data || !data.re){alert('ajax数据未存入');return;}
				if(!data.topt){
					data.topt = $.extend(true, {}, tableOpt, data.opt.tableOpt || {});
					if(data.opt.resultKey && !data.topt.resultKey){data.topt.resultKey = data.opt.resultKey;}
				}
				data.topt.url = data.re;
				dom.children(".draw-box:first").children(".hb-draw:first").htable(data.topt);
				if(typeof data.opt.cb === 'function'){data.opt.cb(data, {type:'sj',eq:eq});}
			};
			//得到数据(单个opt,ajax参数序列,是否强制请求)
			var getData = function(dom, eq, qz){
				clearDraw(dom);
				qz = qz || false;
				eq = Number(eq) || 0;
				if(eq < 0){eq = 0;}
				var obj = dom.data("data")[eq];
				//if(qz){dom.children(".hb-header").children(".hb-title").children("li").eq(eq).children("a").html(obj.opt.name);}	//刷新标题
				//刷新标题
				if(qz){
					var $ull = dom.children(".hb-header").children(".hb-title");
					var eqq = $ull.children(".hb-t-tab-se").index();
					$ull.html('');
					$.each(dom.data("data"), function(i, j){
						var ca = i === eqq ? ' class="hb-t-tab-se"' : '';
						$ull.append('<li'+ca+'><a>'+(j.opt.name || '未命名')+'</a></li>');
					});
					$ull = null;
				}

				var draw = function(){
					//dom.attr("floaded", 1);	//完成标志
					//切换表格显示/隐藏左侧/右侧小图
					var $pre = dom.children(".draw-box").prev(".fl,.fr");
					if($pre.length>0){
						if(dom.children(".hb-header").find(".hb-tab-se").attr("hbtype") === 'sj'){
							$pre.hide();
						}else{
							$pre.show();
						}
					}
					$pre = null;
					//绘图
					var $se = dom.children(".hb-header").find(".hb-tab-se");
					var hbtype = $se.attr("hbtype") || 'qs';
					if(obj.opt.single && obj.opt.single === 'table'){
						drawTable(dom, eq, qz);
					}else if(obj.opt.single && obj.opt.single === 'chart'){
						drawChart(dom, eq, qz);
					}else if(hbtype === 'qs'){
						if($se.parent().hasClass("draw-type")){
							chartOpt.chart.type = 'spline';
							if(obj.copt){obj.copt.chart.type = 'spline';}
						}
						drawChart(dom, eq, qz);
					}else if(hbtype === 'sj'){
						drawTable(dom, eq, qz);
					}else if(hbtype === 'zz'){
						if($se.parent().hasClass("draw-type")){
							chartOpt.chart.type = 'column';
							if(obj.copt){obj.copt.chart.type = 'column';}
						}
						drawChart(dom, eq, qz);
					}
					$se = null;
				};
				if(obj.re && !qz){
					draw();
				}else{
					if(typeof obj.opt.ajax.url === 'string'){
						if(typeof obj.opt.ajax.beforeAjax === 'function'){
							obj.opt.ajax.data = obj.opt.ajax.beforeAjax(obj.opt.ajax.data);
						}
						_fns.ajax({
						    url : obj.opt.ajax.url,
						    data : obj.opt.ajax.data||'',
						    wait : obj.opt.ajax.wait || false,
						    cb : function(re){
						    	if(typeof obj.opt.resultFormat === 'function'){
						    		re = obj.opt.resultFormat(re);
						    	}
						    	obj.re = re;
						    	draw();
						    	if(typeof obj.opt.ajax.cb === 'function'){obj.opt.ajax.cb(re);}
						    }
						});
					}else{
						if(typeof obj.opt.resultFormat === 'function'){
							obj.opt.ajax.url = obj.opt.resultFormat(obj.opt.ajax.url);
				    	}
						obj.re = obj.opt.ajax.url;
						draw();
					}
				}
			};
			//清空表格/绘图
			var clearDraw = function(dom){
				var $box = dom.children(".draw-box").children(".hb-draw");
				if($box.highcharts()){
					$box.highcharts().destroy();
				}else if($box[0].hdata){
					$box[0].hdata.remove();
				}
				$box = null;
			};
			//遍历options
			$.each(options, function(i, j){
				//if(!j.yKeys || !j.ajax){return;}
				if(!j.dom){
					j.dom = options[i - 1].dom;
				}else{
					j.TABSTART  = true;
				}
				if(!j.dom[0] && j.TABSTART){alert('第'+(i+1)+'个参数的dom参数有误，对应的节点不存在。');return;}
				var obj = {
					opt  : j,	//输入参数
					topt : '',	//表格参数
					copt : '',	//highchart参数
					re   : ''	//ajax返回结果
				};
				if(!j.dom.data("data")){j.dom.data("data",[]);}
				j.dom.data("data").push(obj);
				var $ul = j.dom.children(".hb-header").children(".hb-title");
				if(j.TABSTART){$ul.empty();}
				$ul.append('<li><a>'+(j.name || '未命名')+'</a></li>');
				if($ul.children().length > 1){
					$ul.addClass("hb-t-tab").children(":first").addClass("hb-t-tab-se");
				}
				$ul = null;
				//事件委托
				//标题TAB切换
				j.dom.off().on("click", ".hb-t-tab li", function(){
					if($(this).hasClass("hb-t-tab-se") || $(this).siblings().length === 0){return;}
					var eq = $(this).index() || 0;
					if(eq < 0){eq = 0;}
					$(this).addClass("hb-t-tab-se").siblings(".hb-t-tab-se").removeClass("hb-t-tab-se");
					var oopt = $(this).closest(".hblock").data("data")[eq];
					if(typeof oopt.opt.tabClick === 'function'){
						var ree = oopt.opt.tabClick.call(this, oopt.opt, oopt);
						if(ree === false){return;}
					}
					getData($(this).closest(".hblock"), eq, oopt.opt.tabCompulsory || false);
				//视图TAB切换
				}).on("click", ".hb-tab>li", function(){
					if($(this).parent().hasClass("disabled")){return false;}
					if($(this).hasClass("hb-tab-se")){return false;}
					if($(this).siblings().length === 0){return;}
					$(this).addClass("hb-tab-se").siblings(".hb-tab-se").removeClass("hb-tab-se");
					var type = $(this).attr("hbtype");
					if(!type){return;}
					var dom = $(this).closest(".hblock");
					clearDraw(dom);
					var eq = dom.children(".hb-header").find(".hb-t-tab-se").index() || 0;
					if(eq < 0){eq = 0;}
					var oopt = dom.data("data")[eq];
					if(typeof oopt.opt.viewClick === 'function'){
						var ree = oopt.opt.viewClick.call(this, oopt.opt, oopt, type);
						if(ree === false){return;}
					}
					getData(dom, eq, oopt.opt.viewCompulsory || false);
				//表单修改
				}).on("change", ".cons-draw", function(){
					var postData = _fns.hform($(this).closest(".form"));
					var eq = $(this).closest(".hb-header").children(".hb-t-tab").find(".hb-t-tab-se").index();
					eq = eq < 0 ? 0 : eq;
					var data = $(this).closest(".hblock").data("data")[eq];
					if(typeof data.opt.ajax.url !== 'string'){return;}	//不触发AJAX不触发
					data.opt.ajax.data = $.extend(data.opt.ajax.data, postData);
					getData($(this).closest(".hblock"), eq, true);
				//下载功能
				}).on("click", ".hb-icos>.hb-icos2", function(){
					var eq = $(this).closest(".hb-header").children(".hb-t-tab").find(".hb-t-tab-se").index();
					eq = eq < 0 ? 0 : eq;
					var data = $(this).closest(".hblock").data("data")[eq];
					//if(typeof data.opt.download === 'function'){data.opt.download(data.opt);}
					if(typeof data.opt.download === 'function'){data.opt.download.call(this, data.opt);}
				//说明功能
				}).on("click", ".hb-icos>.hb-icos1", function(){
					var data = $(this).closest(".hblock").data("data");
					var arr = [];
					$.each(data, function(i, j){
						if($.isArray(j.opt.sm)){
							arr = arr.concat(j.opt.sm);
						}else{
							arr.push(j.opt.sm);
						}
					});
					_fns.addSm($(this), arr, data[0].opt.smFn);

				});
			});
			if(!asyn){
				$.each(options, function(i, j){
					if(j.TABSTART){
						//j.dom.children(".hb-header").children(".hb-title").children(":first").trigger("click");
						getData(j.dom);
					}
				});
			}else{
				setTimeout(function(){
					HCY.TEX_BOX.children(".hcy-tex-show").off("heEvent").on("heEvent",function(){
						$.each(options, function(i, j){
							if(j.TABSTART){
								var $auto = HCY.TEX_BOX.children(".hcy-tex-show").children(".auto");
								//if(!j.dom.attr("floaded") && j.dom.position().top <= $auto.scrollTop()+$auto.height()){
								if(!j.dom.attr("floaded") && j.dom.position().top <= $auto.scrollTop()+50){
									j.dom.attr("floaded", 1);	//完成标志
									getData(j.dom);
									//console.log(j.name)
								}
								//getData(j.dom);
							}
						});
					}).trigger("heEvent");
				}, 20);
			}

			return {
				//清除
				remove : function(dom){
					if(dom){
						dom.data("data", null);
						clearDraw(dom);
					}else{
						$.each(options, function(i, j){
							if(j.dom){
								j.dom.data("data", null);
								clearDraw(j.dom);
							}
						});
					}
				},
				//得到原始highchart对象
				getHighObj : function(dom){
					if(dom){
						var eq = dom.children(".hb-header").find(".hb-t-tab-se").index();
						eq = eq < 0 ? 0 : eq;
						return dom.data("data")[eq].highObj;
					}else{
						return '';
					}
				},
				//更新
				updata : function(dom){
					if(dom){
						$.each(dom.data("data"), function(i, j){
							j.copt = j.topt = j.re = null;
						});
						var eq = dom.children(".hb-header").find(".hb-t-tab-se").index();
						eq = eq < 0 ? 0 : eq;
						getData(dom, eq, true);
					}else{
						$.each(options, function(i, j){
							$.each(j.dom.data("data"), function(i, j){
								j.copt = j.topt = j.re = null;
							});
							if(!j.TABSTART){return;}
							var eq = j.dom.children(".hb-header").find(".hb-t-tab-se").index();
							eq = eq < 0 ? 0 : eq;
							getData(j.dom, eq, true);
						});
					}
				}
			};	//end return
	   },

	   //单双日历功能(目标，回调，是否为单日历，是否为周日历或者传opt[opt.week-是否周显示])
	   pickerShow : function($el, cb, single, week){
		   if(!$el || $el.length < 1){return;}
		   single = single || false;
		   var opt = {
			   week : false,	//是否为周显示，默认否
			   today : false	//今天是否可选,默认不可选
		   };
		   if(typeof week === 'object'){
			   opt = $.extend(opt, week);
		   }else{
			   opt.week = week || false;
		   }
		   var _fns  =this;
		   _fns.datePickerTarget = $el;
		   _fns.datePickerCb = cb || '';
		   //初始化
		   if(!this.datePicker){
			   $("body").prepend('<div id="date-picker-box" style="display:none;"><input type="text" id="datePicker2" /></div>');
			   this.datePicker = new pickerDateRange('datePicker2', {
					success : function(re){
						_fns.datePickerTarget.val($("body").children("#date-picker-box").find("#datePicker2").val()).siblings(".sdate").val(re.startDate).siblings(".edate").val(re.endDate);
						if(typeof  _fns.datePickerCb === 'function'){_fns.datePickerCb(_fns.hform(_fns.datePickerTarget.closest(".form")) , re, _fns.datePickerTarget);}
					}
			   });
			   this.datePicker.close();
		   }
		   if(!this.datePickerSingle && single){
			   this.datePickerSingle = new pickerDateRange('datePicker2', {
				   	calendars : 1,
					shortOpr : true,
					isSingleDay : true,
					autoSubmit : true,
					success : function(re){
						_fns.datePickerTarget.val(re.startDate);
						if(typeof _fns.datePickerCb === 'function'){_fns.datePickerCb(_fns.hform(_fns.datePickerTarget.closest(".form")) , re,  _fns.datePickerTarget);}
					}
			   });
			   this.datePickerSingle.close();
		   }
		   //显示
		   var $picker = single ? $("body").children(".sin_rl:first") : $("body").children(".db_rl:first");
		   var dp = single ? this.datePickerSingle : this.datePicker;
		   if($picker.is(":visible")){$picker = null;return;}

		   //隐藏，显示头部
		   if(single || $el.hasClass("h-hide") || $el.closest("ul").hasClass("ta-text")){
			   $picker.children(".ta_header").hide();
		   }else{
			   $picker.children(".ta_header").show();
		   }

		   var offset = $el.offset();
		   if(!single){	//双
			   dp.removeCSS();
			   var sdate = $el.siblings(".sdate").val();
			   var edate = $el.siblings(".edate").val();
			   dp.selectDate(sdate);
			   dp.selectDate(edate);
			   dp.show();
		   }else{	//单
			   var v = $el.val() || this.getDate();
			   v = v.split('-');
			   v[1] = Number(v[1]);
			   v[2] = Number(v[2]);
			   v = v.join('-');
			   //console.log(v);
			   //dp.removeCSS();
			   dp.selectDate(v, true);
			   dp.show();
		   }
		   //dp.show();

		   //周显示
		   var wk = typeof week === 'object' ? week.week : week;
		   if(wk){
			   $picker.addClass("week-dpicker");
		   }else{
			   $picker.removeClass("week-dpicker");
		   }
		   $picker.off().on("mouseup", "td", function(){
			   if(!$picker.hasClass("week-dpicker") || $(this).hasClass("ta_dateRangeGray") || $(this).children().length != 0){return;}
			   var curDate = $(this).closest("tbody").siblings("caption").html().replace(/[年,月]/g,'-')+$(this).html();
			   var d = new Date( curDate.replace(/-/g,'/') );
			   var d_time = d.getTime();
			   var d_week = d.getDay();
			   if(!d_week){d_week = 7;}
			   var sd_date = new Date(d_time - (d_week-1)*24*60*60*1000);
			   var ed_date = new Date(d_time + (7-d_week)*24*60*60*1000 > new Date().getTime() ? new Date().getTime() : d_time + (7-d_week)*24*60*60*1000);
			   dp.removeCSS();
			   dp.selectDate( sd_date.getFullYear() + '-' + (sd_date.getMonth()+1) + '-' + sd_date.getDate() );
			   dp.selectDate( ed_date.getFullYear() + '-' + (ed_date.getMonth()+1) + '-' + ed_date.getDate() );
			   return false;
		   });
		   //今天是否可选
		   var curDate = '_'+new Date().getFullYear()+'-'+(new Date().getMonth()+1)+'-'+new Date().getDate();
		   $picker.find("td").each(function(){
			   var rel = this.id || $(this).attr("rel") || '';
			   if(rel.indexOf(curDate) > -1){
				   if(!$(this).attr("rel")){
					   $(this).attr("rel", rel);
				   }
				   if(opt.today){
					   $(this).prop("id", rel).removeClass("ta_dateRangeGray disabled");
				   }else{
					   $(this).prop("id", '').removeClass("today").addClass("ta_dateRangeGray disabled");
				   }
				   return false;
			   }
		   });
		   dp.mOpts.cToday = opt.today;

		   //dp = null;
		   var le = offset.left;
		   if($el.attr("ta") === 'right'){
			   le = offset.left + $el.width() - 258;
			   if(!single){le -= 259;}
		   }
		   $picker.stop().css({
			   display : 'block',
			   opacity : 0,
			   left : le,
			   top : offset.top + 25,
			   marginTop : -25
		   }).animate({
			   opacity : 1,
			   marginTop : 0
		   }, 500, 'easeOutExpo', function(){
			   $("#zzbg").show().data("data", $picker);
			   //$picker = null;
		   });
		   return false;
	   },

	   //日历月显示
	   monthPicker : function($el, cb){
		   if(!$el[0]){return;}
		   var _fns = this;
		   var ca = $el.parent().css("position");
		   if(ca !== 'absolute' && ca !== 'fixed' && ca !== 'relative'){$el.parent().css("position", "relative");}
		   var curDate = this.getDate().split('-');
		   if(curDate[1] == '1'){curDate[0] = Number(curDate[0]) - 1 + ""; curDate[1] = "12";}
		   else{curDate[1] = Number(curDate[1]) - 1 + "";}
		   if(curDate[1].length === 1){curDate[1] = '0'+curDate[1];}
		   var ms = [{key:'01',name:'一月'},{key:'02',name:'二月'},{key:'03',name:'三月'},{key:'04',name:'四月'},{key:'05',name:'五月'},{key:'06',name:'六月'},{key:'07',name:'七月'},{key:'08',name:'八月'},{key:'09',name:'九月'},{key:'10',name:'十月'},{key:'11',name:'十一月'},{key:'12',name:'十二月'}];
		   if(!$el.next(".mp-box").length){
			   var mos = htemplate('<span class="mp-list" rel={key}>{name}</span>', ms);
			   var s = '<div class="mp-box"><div class="mp-h"><i class="fl mp-left"></i><i class="fr mp-right"></i><h3>'+curDate[0]+'</h3></div><div class="mp-b">'+mos+'</div></div>';
			   if($el.attr("ta") === 'right'){
				   $el.after(s).next().css({
					   left : 'inherit',
					   right :0,
					   top : $el.position().top + 24
				   });
			   }else{
				   $el.after(s).next().css({
					   left : $el.position().left,
					   top : $el.position().top + 24
				   });
			   }
		   }
		   var $mp = $el.next(".mp-box");
		   var v = $el.val();
		   var selM, selY;
		   if(v){
			   v = v.split('-');
			   if(!isNaN(v[0])){
				   $mp.children(".mp-h").children("h3").html(v[0]);
				   $mp.children(".mp-b").find("span[rel="+v[1]+"]").addClass("mp-select").siblings(".mp-select").removeClass("mp-select");
				   selY = v[0];
			   }
		   }else{
			   $mp.children(".mp-h").children("h3").html(curDate[0]);
			   $mp.children(".mp-b").find("span[rel="+curDate[1]+"]").addClass("mp-select").siblings(".mp-select").removeClass("mp-select");
			   selY = curDate[0];
		   }
		   $mp.find('.mp-b span').removeClass("mp-gray");
		   if(selY == curDate[0])$mp.find('.mp-b span[rel="' + curDate[1] + '"]').nextAll().addClass("mp-gray");
		   $mp.css({
			   opacity:1,
			   marginTop : -25
		   }).show().animate({
			   opacity : 1,
			   marginTop : 0
		   }, 500, 'easeOutExpo', function(){
			   $("#zzbg").show().data("data", $mp);
		   });
		   $mp.off().on("click", ".mp-list", function(){
		       if($(this).hasClass("mp-gray")){return;}
			   var vv = $mp.children(".mp-h").children("h3").html() + '-' + $(this).attr("rel");
			   $el.val( vv );
			   $("#zzbg").hide();
			   $mp.animate({
				   marginTop : -25,
				   opacity : 0
			   }, 500, 'easeOutExpo', function(){
				   $(this).hide();
			   });
			   if(typeof cb === 'function'){cb(_fns.hform($el.closest(".form")), vv);}
		   }).on("click", ".mp-left", function(){
			   var $h3 = $mp.children(".mp-h").children("h3");
			   if($mp.find('.mp-b .mp-select').length == 1){selY = $h3.html(), selM = $mp.find('.mp-b .mp-select').attr("rel");}
			   $h3.html( Number($h3.html()) - 1 );
			   $mp.find('.mp-b span').removeClass("mp-gray").removeClass("mp-select");
			   if(Number($h3.html()) > Number(curDate[0])){
			       $mp.find('.mp-b span').addClass("mp-gray").removeClass("mp-select");
               }else if(Number($h3.html()) < Number(curDate[0])){
                   $mp.find('.mp-b span').removeClass("mp-gray").removeClass("mp-select");
               }else{
                   $mp.find('.mp-b span[rel="' + curDate[1] + '"]').nextAll().addClass("mp-gray");
               }
			   if(selY == $h3.html()){$mp.find('.mp-b span[rel="' + selM + '"]').addClass("mp-select");}
			   $h3 = null;
		   }).on("click", ".mp-right", function(){
			    var $h3 = $mp.children(".mp-h").children("h3");
			    if($mp.find('.mp-b .mp-select').length == 1){selY = $h3.html(), selM = $mp.find('.mp-b .mp-select').attr("rel");}
		        $h3.html( Number($h3.html()) + 1 );
		        $mp.find('.mp-b span').removeClass("mp-gray").removeClass("mp-select");
		        if(Number($h3.html()) > Number(curDate[0])){
                    $mp.find('.mp-b span').addClass("mp-gray").removeClass("mp-select");
                }else if(Number($h3.html()) < Number(curDate[0])){
                    $mp.find('.mp-b span').removeClass("mp-gray").removeClass("mp-select");
                }else{
                    $mp.find('.mp-b span[rel="' + curDate[1] + '"]').nextAll().addClass("mp-gray");
                }
		        if(selY == $h3.html()){$mp.find('.mp-b span[rel="' + selM + '"]').addClass("mp-select");}
			    $h3 = null;
		   });
	   },

	   //显示条件筛选框并初始化(参数：$el-容器，options-参数数组，submitFn-确定按钮，opt-参数，可加readonly属性)
	   hyBoxShow : function($el, options, submitFn, opt){
		   if($el.length < 1 || !options || $el.hasClass("disabled")){return;}
		   var _fns = this;
		   if(!$.isArray(options)){options = [options];}
		   $el.parent().addClass("rev");
		   if(!$el.attr("rel")){$el.attr("rel", $el.html());}
		   if(!$el.next(".hy-tex").length){
			   var fns = {
			       fna : function(d){
			    	   return d ? 1 : '';
			       }
			   };
			   var str = '<div class="hy-tex"><ul class="sx-ul">'
				   +htemplate('<li class="sx-li"><a href="javascript:;">{name}</a></li>', options)
				   +'</ul><div class="clear hy-op"><input type="text" class="text hy-search" placeholder="" /><b style="margin-right:20px;">'
				   +(options[0].mulSelect?'多选':'单选')+'</b><span class="blue">已选择：</span></div><div class="sx-texs">'
				   +htemplate('<ul refresh="{refresh,fna}" class="form clear sx-tex tloading"><input class="hy-ckbox" type="hidden" /></ul>', options, fns)
				   +'</div><div class="ta-r sx-bt"><a class="bt sx-btn">确定</a><a class="bt bt-gray sx-btn">取消</a></div></div>';
			   $el.after(str + htemplate('<input type="hidden" name="{key}" class="hyb-value" />', options));
		   }
		   var $hyBox = $el.next(".hy-tex");
		   if(opt && opt.readonly){
			   $hyBox.find(".bt-gray").prev(".sx-btn").hide();
		   }else{
			   $hyBox.find(".bt-gray").prev(".sx-btn").show();
		   }
		   if($hyBox.is(":visible")){return;}
		   $("#zzbg").show().data("data", $hyBox);
		   $hyBox.css({
				display : 'block',
				opacity : 0,
				left : $el.position().left,
				top  : $el.position().top + 25,
				marginTop : -25,
				zIndex:'100'
			});
		   if($el.attr("ta") === 'right'){
			   $hyBox.css({
				   left : 'inherit',
				   right :0
			   });
		   }
		   $hyBox.animate({
				opacity : 1,
				marginTop : 0
			}, 500, 'easeOutExpo').off().on("click", ".sx-li", function(){
				//TAB切换
				var $texs = $hyBox.children(".sx-texs:first");
				var eq = $(this).index();
				$(this).addClass("sx-ul-se").siblings(".sx-ul-se").removeClass("sx-ul-se");
				$texs.children(".sx-tex").eq(eq).show().siblings(".sx-tex").hide();
				if($texs.children(".sx-tex").eq(eq).hasClass('tloading') || $texs.children(".sx-tex").eq(eq).attr("refresh")){
					//执行beforeAjax函数
					if(typeof options[eq].beforeAjax === 'function'){
						var obs = $hyBox.children(".hy-op").find("b:first").data("data");
						options[eq].beforeAjax(obs);
					}
					var cb = options[eq].cb;
					options[eq].cb = function(re){
						$texs.children(".sx-tex").eq(eq).removeClass("tloading").data("data",re.data[options[eq].key]).html( htemplate('<li><label class="max hy-ckbox" title="{name}" rel="{id}">{name}</label></li>', re.data[options[eq].key]) )
						.find("label.hy-ckbox").each(function(){
							var rel = $(this).attr("rel");
							var fkey = $el.parent().children(".hyb-value").eq(eq).val() || options[eq].firstKey;
							if(String.prototype.indexOf.call(['',fkey,''],','+rel+',') > -1){
								$(this).trigger("click", 1);
							}
						});
						if(cb){cb(re);}
					};
					if(typeof options[eq].url === 'string'){
						_fns.ajax(options[eq]);
					}else{
						options[eq].cb(options[eq].url);
					}
				}
				if(options[eq].mulSelect){
					var num = $texs.children(".sx-tex").eq(eq).find(".sx-tex-se").length;
					$hyBox.children(".hy-op").find(".blue:first").html('已选择：'+num+'项').prev("b").html("多选").prev(".hy-search").prop("placeholder", '选择'+options[eq].name);//.siblings(".hy-search").trigger("keyup");
				}else{
					var name = $texs.children(".sx-tex").eq(eq).find(".sx-tex-se").text();
					$hyBox.children(".hy-op").find(".blue:first").html('已选择：'+ name).prev("b").html("单选").prev(".hy-search").prop("placeholder", '选择'+options[eq].name);//.siblings(".hy-search").trigger("keyup");
				}

			//搜索
			}).on("keyup", ".hy-search", function(){
				var $ta = $hyBox.children(".sx-texs:first").children(".sx-tex:visible");
				var d = $ta.data("data");
				var v = $.trim($(this).val());
				var eq = $hyBox.children(".sx-ul").find(".sx-ul-se").index() || 0;
				var obs = $hyBox.children(".hy-op").find("b:first").data("data")[eq];	//已选数据
				var fns = {fna : function(d){
					var ca = '';
					$.each(obs, function(i, j){
						if(j.key == d){
							ca = ' sx-tex-se';
							return false;
						}
					});
					return ca;
				}};
				$ta.html( htemplate('<li><label class="max hy-ckbox{id,fna}" title="{name}" rel="{id}">{name}</label></li>', _fns.arrSearch(d, v, 'name'), fns) );

			//选择
			}).on("click", ".hy-ckbox", function(e,b){
				var eq = $hyBox.children(".sx-ul").find(".sx-ul-se").index();
				if(eq < 0){eq = 0;}
				if(opt && opt.readonly && !b){return;}
				if(options[eq].mulSelect){
					if($(this).hasClass("sx-tex-se")){
						$(this).removeClass("sx-tex-se");
					}else{
						$(this).addClass("sx-tex-se");
					}
					var num = $(this).closest("ul").find(".sx-tex-se").length;
					$hyBox.children(".hy-op").find(".blue:first").html('已选择：'+num+'项').prev("b").html("多选");
				}else{
					$(this).addClass("sx-tex-se").parent().siblings().find(".sx-tex-se").removeClass("sx-tex-se");
					var name = $(this).text();
					$hyBox.children(".hy-op").find(".blue:first").html('已选择：'+ name).prev("b").html("单选");
				}
				//得到已选值
				var obs = [];
				$hyBox.children(".sx-texs:first").children("ul.sx-tex").each(function(i){
					obs[i] = [];
					$(this).find(".sx-tex-se").each(function(){
						obs[i].push({key : $(this).attr("rel"), name : $(this).attr("title")});
					});
				});
				$hyBox.children(".hy-op").find("b:first").data("data", obs);

			//确定，取消
			}).on("click", ".sx-btn", function(){
				//提交
				if(!$(this).hasClass("bt-gray")){
					var yz = false;
					var obs = [];
					$hyBox.children(".sx-texs:first").children("ul.sx-tex").each(function(i){
						var ids = [];
						obs[i] = [];
						$(this).find(".sx-tex-se").each(function(){
							ids.push($(this).attr("rel"));
							obs[i].push({key : $(this).attr("rel"), name : $(this).attr("title")});
						});
						//验证最大最小
						if( (options[i].mulSelect && options[i].minNum && ids.length<options[i].minNum) || (options[i].mulSelect && options[i].maxNum && ids.length>options[i].maxNum) ){
							yz = options[i].minNum ? options[i].maxNum ? ('选择数目必须在'+options[i].minNum+'-'+options[i].maxNum+'之间') : '最少选择'+options[i].minNum+'项' : '最多选择'+options[i].maxNum+'项';
							return false;
						}
						$el.siblings("input[name="+options[i].key+"]").val(ids.join(','));
					});
					if(yz !== false){
						$.alert(yz);
						return;
					}
					//console.log(obs);
					var xsStr = (function(){
						var str = '';
						$.each(options, function(i, j){
							//var reli = htemplate(',{key}', obs[i]).substr(1);
							if(j.mulSelect && obs[i].length){
								var s = htemplate(',{name}', obs[i]).substr(1);
								str += '<div eq="'+i+'" class="hy-se-list" title="'+j.name+': '+s+'">' + j.name.substr(0, 1) +': ' + s + '</div>';
							}else{
								str += htemplate('<div eq="'+i+'" class="hy-se-list" rel="{key}" title="'+j.name+': {name}">'+j.name.substr(0, 1)+': {name}</div>', obs[i]);
							}
							//$el.attr("rel"+i, reli);
						});
						return str;
					})();
					if($el[0].tagName !== 'INPUT'){
						$el.html(xsStr || $el.attr("rel"));
					}
					if(typeof submitFn === 'function'){
				   		submitFn(_fns.hform($el.closest(".form")), obs, $el);
				   	}
				}
				//取消
				$hyBox.animate({
					opacity : 0,
					marginTop : -25
				}, 200, function(){
					$(this).hide();
				});
				$("#zzbg").hide().data("data","");
			});
		   	if(opt && opt.e){
		   		var q = Number($(opt.e.target).attr("eq")) || 0;
		   		$hyBox.find(".sx-li").eq(q).trigger("click");
		   	}else if(!$hyBox.find(".sx-ul-se").length){
		   		$hyBox.find(".sx-li:first").trigger("click");
		   	}
	   },

	   //数组搜索(数组，关键字，比较的key)
	   arrSearch : function(arr, keyWord, skey){
		   if(!$.isArray(arr) || !keyWord){return arr;}
		   var re = [];
		   $.each(arr, function(i, j){
			   var str = skey ? j[skey] : j;
			   if(String.prototype.indexOf.call(str, keyWord) > -1){
				   re[re.length] = j;
			   }
		   });
		   return re;
	   },

	   //千分位函数
	   qfw : function(str){
		   if(isNaN(str)){return str;}
		   var arr = String(str).split('.');
		   return String(arr[0]).replace(/(?=(?!\b)(\w{3})+$)/g, ',') + (arr[1]?'.'+arr[1]:'');
	   },

	   //千分位数值转换为数字格式
	   qfw2 : function(str){
		   return Number( (str+'').replace(/,/g, '') );
	   },

	   //日期比较函数
	   checkdate:function CheckDate(sdate,edate)
	   {
		   	var sdatestr=Date.parse(sdate.replace(/-/g,'/'));
		   	var edatestr=Date.parse(edate.replace(/-/g,'/'));
		   	if(sdatestr-edatestr>0)
		   	{
		   		$.alert("起始日期不能大于终止日期，请重新选择！");
		   	}
	   },

	   //罗盘功能
	   comPass : function($el, a, b){
		   var _fns = this;
		   var rab = this.numFixd(a/b, 2);
		   if(rab > 1){rab = 1;}
		   a = this.numFixd(a);
		   b = this.numFixd(b);
		   if($el.children().length > 0){$el.children().remove();}
		   var renderer = new Highcharts.Renderer(
		        $el[0],
		        $el.width(),
		        $el.height()
		   );
		   var g_bg = renderer.g().add();
		   var g_zz = renderer.g().css({fontFamily:'arial'}).add();
		   renderer.arc(110, 150, 80, 40, -Math.PI, 0).attr({
		        fill: '#8a9eac',
		        stroke: '#8a9eac',
		        'stroke-width': 1
		   }).add(g_bg);
		   renderer.text('平均ACU', 30, 40).css({color: '#666666',fontSize: '12px'}).add(g_bg);
		   renderer.text('Max PCU', 88, 180).css({color: '#666666',fontSize: '12px'}).add(g_bg);
		   var tT = renderer.text(_fns.qfw(a), 95, 40).css({color: '#666666',fontSize: '20px',fontWeight:'bold'}).add(g_zz);
		   var bT = renderer.text(_fns.qfw(b), 95, 210).css({color: '#666666',fontSize: '20px',fontWeight:'bold'}).add(g_zz);
		   var zz = renderer.path(['M', 0, -5, 'L', -100, 0, 0, 5, 0, -5]).attr({
               'stroke-width': 1,
               translateX:110,
               translateY:150,
               fill: '#435068',
               rotation : 180 * rab || 0,
               stroke: '#435068'
           }).add(g_zz);
		   renderer.circle(110, 150, 5).attr({
		        fill: '#435068',
		        stroke: '#435068',
		        'stroke-width': 1
		    }).add(g_zz);
		   return {
			   update : function(a, b){
				   tT.attr('text', _fns.qfw(a));
				   bT.attr('text', _fns.qfw(b));
				   zz.attr('rotation', 180 * rab );
			   }
		   };
	   },

	   //圆形进度功能($el-容器,opt-参数)
	   cirProgress : function($el, opt){
		   if($el.length <= 0){return;}
		   opt = $.extend({
			   name : '',			//名称
			   percentage : 0,		//百分比
			   value : 0,			//值
		       growthRate : 0,		//增长率
		       radius : 60			//园的半径
		   }, opt);
		   var _fns = this;
		   if(opt.percentage > 100){opt.percentage = 100;}
		   $el.empty();
		   var w = $el.width();
		   var h = $el.height();
		   var renderer = new Highcharts.Renderer($el[0], w, h);
		   renderer.circle(w/2, h/2, opt.radius).attr({
		        fill: '#FFF',
		        stroke: '#e2e5e8',
		        'stroke-width': 10
		   }).add();
		   renderer.arc(w/2, h/2, opt.radius-5, opt.radius+5, -Math.PI/2, opt.percentage*Math.PI/50-Math.PI/2).attr({
		        fill: opt.percentage === 100 ? '#00c5b5' : '#0095c3'
		   }).add();
		   var group = renderer.g().css({fontFamily:'arial',color:'#666666',fontSize:'14px'}).add();
		   renderer.text(_fns.numFixd(opt.percentage)+'%', w/2, h/2-30).attr({"text-anchor":"middle"}).add(group).css({fontWeight:'bold'}).add(group);
		   renderer.text(_fns.qfw(opt.value), w/2, h/2+5).attr({"text-anchor":"middle"}).css({fontSize:'20px',fontWeight:'bold'}).add(group);
		   var group2 = renderer.g().add(group);
		   var rt = _fns.numFixd(opt.growthRate,1);
		   var gap = (rt+'').length !== 1 ? (rt+'').length > 3 ? -7 : 0 : 5;
		   var img = rt > 0 ? 'arr-up' : 'arr-down';
		   renderer.text(Math.abs(rt)+'%', w/2-10+gap, h/2+35).css().add(group2);
		   renderer.image('static/img/'+img+'.png', w/2-25+gap, h/2+21, 12, 15).css({float:'right'}).add(group2);
		   renderer.text(opt.name, w/2, 30+opt.radius+h/2).attr({"text-anchor":"middle"}).add(group);
	   },

	   //增加说明功能
	   addSm : function($el, obj, fn){
		   if(!$el || !obj){return;}
		   var ca = $el.parent().css("position");
		   if(ca !== 'absolute' && ca !== 'fixed' & ca !== 'relative'){$el.parent().css("position", "relative");}
		   $el.next(".draw-sm").remove();
		   if(!$el.next(".draw-sm").length){
			   if(!$.isArray(obj)){obj = [obj];}
			   var str = (function(arr){
				   var s = '';
				   $.each(arr, function(i, j){
					   if(!j){return;}
					   j = j.split('：');
					   if(j.length === 1){j.unshift('');}
					   s += '<b>'+j.shift()+'</b><p>'+j.join('：')+'</p>';
				   });
				   if(typeof fn === 'function'){s = fn(s);}
				   return '<div class="draw-sm"><i class="arr-top"></i><div class="arr-tex">' + s + '</div></div>';
			   })(obj);
			   $el.after(str);
			}
			if($el.next(".draw-sm").is(":visible")){
				$el.next(".draw-sm").fadeOut('fast');
				$("#zzbg").hide().data("data","");
			}else{
				$el.next(".draw-sm").fadeIn('fast');
				$("#zzbg").show().data("data", $el.next(".draw-sm"));
			}
	   },

	   //保留小数点精后n位
	   numFixd : function(num, n){
		   n = n || 0;
		   if(isNaN(num)){return num;}
		   var snum = num + '';
		   num = Number(num);
		   if(snum.indexOf('.') > -1 && snum.split('.')[1].length > n){
			   num = num.toFixed(n);
		   }
		   return num;
	   },

	   //绘制实时饼图(DOM，数据，名称，highcharts参数)
	   drawPie : function($e, da, name, opt){
		   if($e && $e.dom){
			   var $el = $e.dom;
			   var da = $e.da;
			   var name = $e.name;
			   var opt = $e.opt;
		   }else{
			   var $el = $e;
		   }
		   if(!$el || !$.isArray(da)){return;}
		   //判断是否数据为空
		   $el.removeClass("d-pie");
		   var isNull = true;
		   $.each(da, function(i, j){
			   if(j[1]){
				   isNull = false;
				   return false;
			   }
		   });
		   if(isNull){
			   //return;
		   }else{
			   $el.addClass("d-pie");
		   }
		   var _fns = this;
		   var chart = $el.data("data");
		   if(chart){
			   chart.highcharts().series[0].update({
				   name : name,
				   data : da
			   });
			   if($e.header){$el.children(".d-pie-h").text($e.header);}
			   if($e.footer){$el.children(".d-pie-f").text($e.footer);}
			   return;
		   }else{
			   $el.html('<div class="d-pie-h">'+($e.header||'')+'</div><div class="d-pie-b"></div><div class="d-pie-f">'+($e.footer||'')+'</div>');
		   }
		   var pieOpt = opt || {
			   title : '',
			   tooltip: {
	    		   formatter: function () {
	                   return this.series.name + '<br/>' + this.key +
	                       '：<b>' + _fns.numFixd(this.percentage, 1) + '%</b>';
	               }
		        },
		       //设定图例最大高度
		       legend : {
		        	maxHeight : 100,
		        	labelFormatter : function(){
		        		return this.name +
	                       '：<b>' + _fns.numFixd(this.percentage, 1) + '%</b>';
		        	}
		        },
		       plotOptions: {
		            pie: {
		                dataLabels: {
		                	enabled: false
		                },
	                    showInLegend: true	//显示图例
		            }
		       },
			   credits : false,
		       series: [{
		            type: 'pie',
		            name: name,
		            data: []
		       }]
		   };
		   pieOpt.series[0].data = da;
		   var pie = $el.children(".d-pie-b").highcharts(pieOpt);
		   $el.data("data",pie);
	   },

	   //绘制千层饼图
	   drawLasagna: function($el, da, opt){
	       if(!$el || !$.isArray(da)){return;}
	       var lasagnaOpt = opt || {
	           chart: {type: 'pie'},
	           title: {text: ''},
	           plotOptions: {
	               pie: {
	                   shadow: false,
	                   center: ['50%', '50%'],
	                   allowPointSelect: true,
	                   cursor: 'pointer',
	                   showInLegend: false
	               }
	           },
	           legend: {
	               width: 200,
	               itemWidth: 100
	           },
	           series: []
	       };

	       var size = da.length;
	       //离心半径因子，越大中心圆越大，越小反之
	       var rDivisor = 0.8;
	       //间隙占比，越大中间空白越小，越小反之
	       var rReality = 0.91;
	       var circleWidthTotal = rDivisor / size;
	       var circleWidth = circleWidthTotal * rReality;
	       var getCircleParam = function(){
	           var arr_r = [], arr_r_out = [], arr_r_in = [], r = 1;
	           for(var i = size; i >= 0; --i){
	               arr_r_out.push(r);
	               arr_r_in.push((r - circleWidth) / r);
	               r = r - circleWidthTotal;
	           }
	           arr_r[0] = arr_r_out, arr_r[1] = arr_r_in;
	           return arr_r;
	       }
	       var arr = getCircleParam();
	       $.each(da, function(i, j){
	           var tobj = {
	               name: j[0].name,
	               dataLabels: {
	                   enabled: false
	               },
	               data: j,
	               size: arr[0][i] * 100 + '%',
	               innerSize: arr[1][i] * 100 + '%',
	               showInLegend: !i?true:false
	           };
	           lasagnaOpt.series.push(tobj);
	           tobj = null;
	       });

	       $el.highcharts(lasagnaOpt);
	   },

	   //绘制实时漏斗图(DOM，数据， 趋势值, 参数)
	   drawFunnel : function($el, da, title, opt){
		   var _fns = this;
		   var deOpt = {
		       titles : ['指标名称','参考值',' ','&nbsp;&nbsp;趋势值']   //表头名称
		   };
		   opt = $.extend(deOpt, opt);
		   if(!$el || !$.isArray(da)){return;}
		   var re = {
		       code : 200,
		       data : {
		    	   result : da
		       }
		   };
		   var getRadio = function(arr, eq){
			   var d = Number(arr[eq].value);
			   eq = eq - 1 < 0 ? 0 : eq - 1;
			   if(d === 0){return 0;}
	    	   return _fns.numFixd(Number(arr[eq].value)*100/d, 1);
		   };
		   var opt = {
			   url : re,
			   horiAuto : true,
			   model : [
			       {key : 'name', value : deOpt.titles[0], width : 80},
			       {key : 'ckz', value : deOpt.titles[1], width : 80,cla:'lgray'},
			       {key : 'value', value : deOpt.titles[2], width : 235,cla:'fnl', repla:function(d, dd, eq){
			    	   if(!eq){
			    		   return d || 0;
			    	   }else if(!d && d!==0){
			    		   return "0% | 0";
			    	   }else {
			    		   return typeof d === 'string' ? d : getRadio(da, eq) + '% | '+ d;
			    	   }

			       }},
			       {key : 'qsz', value : deOpt.titles[3], width : 100,cla:'qsz ta-l',repla:function(d, dd, eq){
			    	   d = isNaN(d)?d:Number(d);
			    	   var ca = '';
			    	   if(d > 0){ca = ' tb-up';}
			    	   if(d < 0){ca = ' tb-down';}
			    	   return '<span class="updown'+ca+'" style="line-height:45px;margin-left:0px;">'+(isNaN(d)?d:Math.abs(d)+'%')+'</span>';
			       }}
			   ]
		   };
		   if($el.children().length){
			   $el[0].hdata.url = re;
			   $el[0].update();
		   }else{
			   $el.htable(opt);
		   }
		   if(title){$el.next(".fs-f").html(title);}
	   },

	   //绘制实时柱状图(容器，Y轴数据，X轴数据,名称)
	   drawHcom : function($el, da, name){
		   //if(!$el || !$.isArray(da)){return;}
		   var colors = Highcharts.getOptions().colors;
		   var xdata = [];
		   var ydata = da;
		   $.each(ydata, function(i, j){
			   xdata.push(j.name);
			   delete j.name;
			   j.color = colors[i];
		   });
		   var chart = $el.data("data");
		   if(chart){
			   chart.highcharts().series[0].update({
				   name : name,
				   data : ydata
			   });
			   return;
		   }

		   var opt = {
			    chart: {
			        type: 'column'	//spline
			    },
			    title: {
			        text: ''
			    },
			    credits : false,
			    xAxis: {
			        categories: xdata,
			    	labels: {}
			    },
			    yAxis: {
			        title: {
			            text: ''
			        }
			    },
			    tooltip: {
			        crosshairs: true,
			        shared: true
			    },
			    series: [{
			    	color: 'white',
		            name: name,
		            data:ydata
			    }]
		   };
		   var tx = $el.highcharts(opt);
		   $el.data("data",tx);
	   },

	   //可拖动的彩色条(容器，初始化参数，拖动停止执行的函数)
	   dbar : function($el, opt, fn){
		   if(!$el[0]){return;}
		   //彩条默认参数
		   opt  = $.extend({
			   min : 1,		//最小数值
			   max : 100,	//最大数值
			   num : 4,		//划分为几段
			   unit : '级',	//单位
			   disabled : false,	//是否不可用
			   startStr : '',	//第一个替换字符
			   endStr : '',	//最后一个替换字符
			   colors : Highcharts.getOptions().colors	//色彩们
		   },opt);
		   var fx = this.numFixd;	//取整
		   var ew = $el.width();	//总宽度
		   var pos = []; 			//d-bar的left值集合
		   //渲染
		   var render = function(){
			   var s = ['<div class="db-bg"></div>'];
			   var bw = ew/opt.num;
			   for(var i = 0; i < opt.num; i++){
				   pos.push((i+1)*bw);
				   s = s.concat([
				       '<div class="d-colm" style="left:'+i*bw+'px;width:'+bw+'px;'+(opt.disabled?'':'background-color:'+opt.colors[i]+';')+'"></div>',
				       '<div class="d-bar" eq="'+i+'" style="left:'+((i+1)*bw)+'px;">'+fx( opt.min + (i+1)*(opt.max-opt.min)/opt.num )+'</div>'
				   ]);
			   }
			   s.pop();pos.pop();
			   var endStr = opt.endStr || opt.max+'('+opt.unit+')';
			   $el[(opt.disabled?'addClass':'removeClass')]('d-disabled').html(s.join('') + '<div class="d-head">'+(opt.starStr || opt.min)+'</div><div class="d-foot">'+endStr+'</div>');
		   };
		   render();
		   var $tds = $el.children(".d-bar");
		   var $colm = $el.children(".d-colm");
		   var teq = false;
		   var ex = $el.offset().left;	//差值
		   $el.off().on("mousedown", ".d-bar", function(){
			   if($el.hasClass("d-disabled")){return;}
			   teq = Number($(this).attr("eq"));
			   return false;
		   }).on("mouseup", ".d-bar", function(){
			   if($el.hasClass("d-disabled")){return;}
			   if(teq === false){return;}
			   teq = false;
			   if(typeof fn === 'function'){
				   var arr = [opt.min];
				   $el.children(".d-bar").each(function(){
					   arr.push( Number($(this).html()) );
				   });
				   arr.push(opt.max);
				   fn(arr);
			   }
		   }).on("mouseout", function(){
			   //teq = false;
		   }).on("mousemove", function(e){
			   if($el.hasClass("d-disabled")){return;}
			   if(teq === false){return;}
			   var cnum = 20;
			   var left = e.clientX - ex;
			   if(teq === 0 || teq === pos.length-1){
				   if(left < 0 + cnum){left = 0 + cnum;}
				   else if(left > ew - cnum){left = ew - cnum;}
			   }
			   if(teq !== 0 && left < pos[teq-1]+cnum){left = pos[teq-1]+cnum;}
			   if(teq !== pos.length-1 && left > pos[teq+1]-cnum){left = pos[teq+1]-cnum;}
			   pos[teq] = left;
			   $tds.eq(teq).css("left", left).html( fx(opt.max*left/ew) );
			   $colm.eq(teq).css("width", left - $colm.eq(teq).position().left);
			   $colm.eq(teq+1).css({
				   left : left,
				   width : (teq >= pos.length - 1 ? ew : pos[teq+1]) - left
			   });
			   //console.log(pos)
			   return false;
		   });
		   return {
			   getValue : function(){
				   var arr = [opt.min];
				   $el.children(".d-bar").each(function(){
					   arr.push( Number($(this).html()) );
				   });
				   arr.push(opt.max);
				   return arr;
			   }
		   };
	   },

	   //可拖动的固定条(容器，初始化参数，拖动停止执行的函数)
	   tbar : function($el, opt, fn){
		   if(!$el[0]){return;}
		   //彩条默认参数
		   opt  = $.extend({
			   boxWidth : 0,	//容器总宽度(可省略)
			   startNum : 1,	//起始数字
			   nums : 20,		//总点数
			   minNum : 10,		//最小数量，少于此数量不展示
			   ceil : 35,		//单元格正常宽度
			   minCeil : 25,	//单元格最小宽度
			   refresh : false	//是否强制刷新
		   },opt);
		   if($el.siblings(".hb-header").find(".hb-tab-se").attr("hbtype") == 'sj' || opt.nums < opt.minNum){$el.hide();return;}
		   $el.show().siblings(".tbar").hide();
		   if($el.children().length){
			   if($el.attr("nums") && Number($el.attr("nums")) !== opt.nums || opt.refresh){}
			   else{return;}
		   }
		   $el.attr("nums", opt.nums).html('<div class="tbar-box"><div class="tbar-bg"><ul class="tbar-h"></ul></div></div><i class="tbar-ml"></i><i class="tbar-mr"></i>');
		   var $bg = $el.find(".tbar-bg");
		   var $bar = $el.find(".tbar-h");
		   var iss = '<i class="tbar-l"></i><i class="tbar-r"></i>';
		   var width = opt.boxWidth || $el.children(".tbar-box").width();	//总容器宽度
		   //单元格宽度
		   var cw = (function(){
			   var w = width/opt.nums;
			   if(w < opt.minCeil){
				   w = opt.ceil;
				   $el.removeClass("dc-hide");
			   }else{
				   $el.addClass("dc-hide");
			   }
			   return w;
		   })();
		   $bg.css("width", opt.nums*cw+5).append( (function(){
			   var str = '<ul class="tbar-bul">';
			   for(var i = opt.startNum; i <= opt.nums+opt.startNum; i++){
				   str += '<li style="width:'+(cw-1)+'px;'+(i==opt.nums?'border-right:none;':'')+'">'+i+'</li>';
			   }
			   return str+'</ul>';
		   })() );
		   $bar.html( (function(){
			   var str = '';
			   for(var i = opt.startNum; i < opt.minNum+opt.startNum; i++){
				   str += '<li style="width:'+(cw-1)+'px;">'+i+'</li>';
			   }
			   return str + iss;
		   })() );
		   //位置重置函数
		   var toPos = function(left){
			   if(left < 0){left = 0;}
			   else if(left > opt.nums*cw - opt.minNum*cw){left = opt.nums*cw - opt.minNum*cw;}
			   if(left%cw >= cw/2){left = left - left%cw + cw;}
			   if(left%cw < cw/2){left = left - left%cw;}
			   $bar.css("left", left);
			   var str = '';
			   for(var i = parseInt(left/cw)+opt.startNum; i < parseInt(left/cw)+opt.startNum+opt.minNum; i++){
				   str += '<li style="width:'+(cw-1)+'px;">'+i+'</li>';
			   }
			   $bar.html( str + iss );
			   if(typeof fn === 'function'){
				   var arrs = [];
				   $bar.children("li").each(function(){
					   arrs.push(Number($(this).text()));
				   });
				   fn(arrs);
			   }
		   };
		   var teq = false;	//激活拖动
		   $el.off().on("mousedown", ".tbar-ml", function(){
			   $bg.animate({marginLeft : 0}, 1000);
		   }).on("mouseup", ".tbar-ml", function(){
			   $bg.stop();
		   }).on("mousedown", ".tbar-mr", function(){
			   $bg.animate({marginLeft : width - opt.nums*cw - 3}, 1000);
		   }).on("mouseup", ".tbar-mr", function(){
			   $bg.stop();
		   }).on("click", ".tbar-bul>li", function(){
			  toPos($(this).position().left);
		   }).on("mousedown", ".tbar-h", function(e){
			   teq = e.clientX;
			   return false;
		   }).on("mouseup", function(){
			   if(teq === false){return;}
			   toPos($bar.position().left);
			   teq = false;
		   }).on("mouseout", function(){
			   //teq = false;
		   }).on("mousemove", function(e){
			   if(teq === false){return;}
			   var xb = e.clientX - teq;
			   $bar.css("left", '+='+xb);
			   teq = e.clientX;
			   return false;
		   });
	   },

	   //数据转换，自动补齐(参数：da-数据源数组，opt-参数)
	   dataSug : function(da, opt){
		   if(!$.isArray(da)){return da;}
		   //默认参数
		   var def = {
		       beginNum : 1,		//排序开始数字
		       step : 3,			//补全步长
		       xMin : 1,			//x轴最小值
		       xMax : 20,			//X轴的最大值
		       key : 'groupID',		//排序的key值
		       xKey : 'xKey',		//x轴的key值
		       unit : '',			//单位
		       endStr : ''			//替换x轴最后一个值
		   };
		   opt = $.extend(def, opt);
		   var arr = [];
		   var obj = (function(a){
			   var o = $.extend(true, {}, a);
			   $.each(o, function(i, j){
				   o[i] = 0;
			   });
			   return o;
		   })(da[0]);
		   var snum = opt.xMin;	//步长开始
		   var eq = 0;	//数组索引
		   var ar = opt.beginNum;	//key索引
		   $.each(da, function(i, j){
			   if(j[opt.key] >= opt.beginNum){
				   eq = i;
				   return false;
			   }
		   });
		   for(var i = opt.xMin; i <= opt.xMax; i += opt.step + 1){
		   	   if(snum > opt.xMax){break;}
			   var o = null;
			   if(da[eq] && da[eq][opt.key] === ar){
				   o = da[eq];
				   eq++;
			   }else{
				   o = $.extend({}, obj);
				   o[opt.key] = ar;
			   }
			   if(snum === opt.xMax){
				   o[opt.xKey] = snum + opt.unit;
			   }else{
				   var oa = snum + opt.step > opt.xMax ? opt.xMax : snum + opt.step;
				   o[opt.xKey] = snum == oa ? snum + opt.unit : snum + '-' + oa + opt.unit;
				   //o[opt.xKey] = snum + '-' + (snum + opt.step > opt.xMax ? opt.xMax : snum + opt.step) + opt.unit;
			   }
			   arr.push(o);
			   snum += opt.step + 1;
			   ar++;
		   }
		   if(opt.endStr){arr[arr.length - 1][opt.xKey] = opt.endStr;}
		   return arr;
	   },

	   //数据选择性转换，自动补齐(参数：da-数据源，key-要处理的数据的key，opt-处理参数)
	   keySug : function(da, key, opt){
		   if(!da){return da;}
		   opt = opt || {};
		   key = key || 'result';
		   if(da[key]){
			   da[key] = this.dataSug(da[key], opt);
		   }else{
			   da.data[key] = this.dataSug(da.data[key], opt);
		   }
		   return da;
	   },

	   //数据分组转换，自动补齐(参数：da-数据源，数组格式，arr-分组数组，opt-参数)
	   dataGroupSug : function(da, arr, opt){
		   if(!$.isArray(da) || !arr){return da;}
		   if(!$.isArray(arr)){arr = arr.split(',');}
		   //默认参数
		   var def = {
		       beginNum : 1,		//排序开始数字(dataSug参数)
		       step : 0,			//补全步长，默认1(dataSug参数)
		       xMin : 1,			//x轴最小值(dataSug参数)
		       xMax : 100,			//X轴的最大值(dataSug参数)
		       key : 'groupID',		//排序的key值
		       xKey : 'xKey',		//x轴的key值
		       divide : true,		//是否根据arr智能划分，默认是
		       unit : '',			//单位
		       endStr : '',			//替换x轴最后一个值
		       endArrStr : ''			//替换数组x轴最后一个值
		   };
		   opt = $.extend(def, opt);
		   da = this.dataSug(da, opt);
		   var a = [];	//结果数据集
		   var i = opt.divide ? 1 : 0;
		   for(; i < arr.length; i++){
			   if(opt.divide){
				   var o = da[i-1] || {};
				   if(isNaN(arr[i]) || i == 1){
					   o[opt.xKey] = arr[i-1] + '-' + arr[i] + opt.unit;
				   }else{//update by wxd 强制将String转为数字
					   o[opt.xKey] = (Number(arr[i-1])+1) == arr[i] ? (arr[i] + opt.unit) : (Number(arr[i-1])+1) + '-' + arr[i] + opt.unit;
				   }
			   }else{
				   var o = da[i] || {};
				   o[opt.xKey] = arr[i] + opt.unit;
			   }
			   a.push(o);
		   }
		   if(opt.endArrStr){
			   a[a.length - 1][opt.xKey] = opt.endArrStr;
		   }
		   return a;
	   },

	   //数据选择性分组转换，自动补齐(参数：da-数据源，key-要处理的数据的key，arr-分组数组，opt-处理参数)
	   keyGroupSug : function(da, key, arr, opt){
		   if(!da || !arr){return da;}
		   opt = opt || {};
		   key = key || 'result';
		   if(da[key]){
			   da[key] = this.dataGroupSug(da[key], arr, opt);
		   }else{
			   da.data[key] = this.dataGroupSug(da.data[key], arr, opt);
		   }
		   return da;
	   },

	   //单选/多选弹出框
	   showCheckBox : function(opt){
		   opt = $.extend({
			   dom : '',			//容器
			   title : '请选择',		//弹层标题
			   treeTitle : '请选择',	//树的tab标题
			   treeOpt : {},		//生成树的参数
			   tableOpt : {},		//生成列表的参数
			   treeKey : 'key', 	//请求列表的发送的key
			   mulSelect : false,	//是否是多选
			   searchKey : 'name',	//搜索的字段名
			   selectKeys : 'id',	//选择的字段名
			   firstKeys : '',		//已选ID列表，逗号隔开
			   trueFn : null		//确定调用函数
		   }, opt);
		   if(!opt.dom.length){return;}
		   var _fns = this;
		   //tree默认参数
		   opt.treeOpt = $.extend({
			   stepStart : 10,
			   mulSelect : true
		   }, opt.treeOpt);
		   //table默认参数
		   opt.tableOpt = $.extend({
			   page : true,
			   fakePage : true,
			   pageSize : 10
		   }, opt.tableOpt);
		   if(opt.mulSelect){
			   opt.tableOpt.mulSelect = opt.selectKeys;
		   }else{
			   opt.tableOpt.selected = 1;
		   }
		   var refresh = true;	//是否重新绘表
		   var seList = opt.firstKeys;	//已选列表（字符串）
		   var list = [];	//已选列表(对象)
		   //回调
		   opt.tableOpt.cb = function(re){
			   if(refresh){$table.data("oldData", re);}
			   if(seList){
				   $table[0].hdata.setChecked(seList, opt.selectKeys, !opt.mulSelect);
				   list = $table[0].hdata.getChecked(!opt.mulSelect);
			   }
		   };
		   //已选表格默认参数
		   var tableOpt2 = {
			   model : [
			       {key : '', value : '序号', width:40},
			       {key : opt.searchKey, value : '名称'}
			   ],
			   page : true,
			   fakePage : true,
			   pageSize : 10
		   };
		   //初始化
		   var $ckBox = $('<div class="hdialog f-hdialog ck-box" title="'+opt.title+'" width="780" height="515"><div class="ckbox-slide"><ul class="ck-tab"><li class="ck-tab-se">'+opt.treeTitle+'</li></ul><div class="htree loading" style="height:407px;"></div></div><div class="ckbox-list"><ul class="ck-tab"><li class="ck-tab-se">待选</li>'+(opt.mulSelect ? '<li>已选</li>' : '')+'</ul><div class="ckbox-search"><input class="text ckbox-search-v" placeholder="按名称搜索" /></div><div class="ckbox-table loading"></div></div><div class="ckbox-bts"><a class="bt ckbox-true hclose">确定</a><a class="bt bt-gray ckbox-false hclose">取消</a></div></div>');
		   opt.dom.append($ckBox);
		   $ckBox.hdialog();
		   var $tree = $ckBox.find(".htree");
		   var $table = $ckBox.find(".ckbox-table");
		   $ckBox[0].hd.open();
		   $tree.htree(opt.treeOpt);
		   $table.data("url",opt.tableOpt.url).htable(opt.tableOpt);

		   //事件
		   //关闭
		   $ckBox.off().on("click", ".hclose", function(){
			   window.setTimeout(function(){
				   $tree[0].remove();
				   $table[0].hdata.remove();
				   $ckBox.off().remove();
				   $table.data({
					   oldData : null,
					   url : null
				   });
				   $ckBox = $tree = $table = null;
			   },500);
		   //change htable-checkbox
		   }).on("change", ".b-checkbox", function(){
			   var eq = Number($(this).closest("tr").attr("eq"));
			   var obj = $table[0].hdata.result.data[opt.tableOpt.resultKey || 'result'][eq];
			   var check = this.checked;
			   var yz = true;
			   $.each(list, function(i,j){
				   if(check && j[opt.selectKeys] === obj[opt.selectKeys]){
					   yz = false;
					   return false;
				   }else if(!check && j[opt.selectKeys] === obj[opt.selectKeys]){
					   list.splice(i, 1);
					   return false;
				   }
			   });
			   if(check && yz){
				   list.push(obj);
			   }
			   seList = htemplate(',{'+opt.selectKeys+'}', list).substr(1);
		   //change htree-checkbox
		   }).on("change", ".htree-ck", function(){
			   refresh = true;
			   var postData = {};
			   postData[opt.treeKey] = $tree[0].getValues(opt.selectKeys).join(',');
			   if($table.hasClass("ck-yx")){
				   $table.removeClass("ck-yx").siblings(".ck-tab").children("li:first").addClass("ck-tab-se").siblings().removeClass("ck-tab-se");
			   }
			   $table[0].hdata.remove();
			   opt.tableOpt.data = $.extend(opt.tableOpt.data, postData);
			   opt.tableOpt.url = $table.data("url");
			   $table.htable(opt.tableOpt);
		   //change htable-全选全部选
		   }).on("change", ".h-checkbox", function(){
			   var check = this.checked;
			   if(check){
				   list = $table.data("oldData").data[opt.tableOpt.resultKey || 'result'];
				   seList = htemplate(',{'+opt.selectKeys+'}', list).substr(1);
			   }else{
				   list = [];
				   seList = '';
			   }
		   //htable-单选
		   }).on("click", ".htb-tbody>tr", function(e){
			   if(e.target.tagName === 'INPUT'){return;}
			   var eq = $(this).closest(".ckbox-list").children(".ck-tab").find(".ck-tab-se").index();
			   if(eq){return;}
			   if(opt.mulSelect){
				   var $ck = $(this).find(".b-checkbox");
				   var ck = !$ck[0].checked;
				   $ck.prop("checked", ck).trigger("change");
				   $ck = null;
			   }else{
				   if($(this).hasClass("htable-select")){
					   var eq = Number($(this).attr("eq"));
					   list = $table[0].hdata.result.data[opt.tableOpt.resultKey || 'result'][eq];
					   seList = list[opt.selectKeys];
				   }else{
					   list = [];
					   seList = '';
				   }
			   }
		   //待选、已选
		   }).on("click", ".ck-tab>li", function(){
			   refresh = false;
			   if($(this).hasClass("ck-tab-se")){return;}
			   $(this).addClass("ck-tab-se").siblings(".ck-tab-se").removeClass("ck-tab-se");
			   var eq = $(this).index();
			   if(!eq){
				   $table[0].hdata.remove();
				   if($table.data("oldData")){opt.tableOpt.url = $table.data("oldData");}
				   $table.removeClass("ck-yx").htable(opt.tableOpt);
				   $table.siblings(".ckbox-search").find(".ckbox-search-v").prop("disabled", false).val('');
			   }else{
				   tableOpt2.url = {code : 200, data : {result : list}};
				   $table[0].hdata.remove();
				   $table.addClass("ck-yx").htable(tableOpt2);
				   $table.siblings(".ckbox-search").find(".ckbox-search-v").prop("disabled", true).val('');
			   }
		   //搜索
		   }).on("keyup", ".ckbox-search-v", function(){
			   refresh = false;
			   var v = $.trim($(this).val());
			   var da = $table.data("oldData");
			   var data2 = da;
			   if(v){
				   var ndata = _fns.arrSearch(da.data[opt.tableOpt.resultKey||'result'], v, opt.searchKey);
				   data2 = {code : 200, data : {}};
				   data2.data[opt.tableOpt.resultKey||'result'] = ndata;
			   }
			   $table[0].hdata.result = data2;
			   $table[0].update();

		   //确定
		   }).on("click", ".ckbox-true", function(){
			   if(typeof opt.trueFn === 'function'){
				   seList = htemplate(',{'+opt.selectKeys+'}', list).substr(1);
			       opt.trueFn(seList, list);
			   }
		   });
	   },

	   drawCustomTable: function(opt){
	       opt = $.extend({
	           dom: null,
	           data: null,
	           fdata: [],
	           head: [],
	           body: [],
	           input: false,
	           resultKey: "result"
	       }, opt);

	       if(!opt.dom || !opt.data || !opt.head.length){return;}
	       var draw = function(){
	           var tableStr = '<table class="ctable" border="1"><thead>';
	           var colspan = 0;
	           $.each(opt.head, function(i, j) {
	               tableStr += '<tr>';
	               $.each(j, function(m, n) {
	                   tableStr += ++colspan && '<th ' + ((n.rowspan && n.rowspan > 1) ? ('rowspan="' + n.rowspan + '" ') : '') + ((n.colspan && n.colspan > 1 && colspan--) ? ('colspan="' + n.colspan + '" ') : '') + (n.bordStyle ? 'class="' + n.bordStyle + '"' : '') + '">' + n.name + '</th>';
	               });
	               tableStr += '</tr>';
	           });
	           tableStr += '</thead><tbody>';
	           if(opt.data.length){
    	           $.each(opt.data, function(i, j) {
    	               tableStr += '<tr>';
    	               $.each(opt.body, function(m, n) {
    	                   tableStr += '<td' + (n.bordStyle ? ' class="' + n.bordStyle + '"' : '') + '>' + (typeof n.cb === 'function'?n.cb(j[n.key]):j[n.key]) + '</td>';
    	               });
    	               tableStr += '</tr>';
    	           });
	           }else tableStr += '<tr><td colspan="' + colspan + '">无数据</td></tr>';
	           tableStr += '</tbody><tfoot>';
	           $.each(opt.fdata, function(i, j){
	               if(j.hasOwnProperty('column')){
	                   tableStr += '<tr>';
	                   $.each(j.column, function(m, n){
	                       n.position = (n.hasOwnProperty('position') && n.position) || 'right';
	                       tableStr += '<td class="rsolid ' + n.position + '" colspan="' + n.colspan + '">' + n.name + n.value + '</td>';
	                   });
	                   tableStr += '</tr>';
	               }else{tableStr += '<tr><td colspan="' + colspan + '">' + j.name + j.value +  '</td></tr>';}
	           });
	           tableStr += '</tfoot></table>';
	           opt.dom.append(tableStr);
	       };

	       var clearDraw = function(){
	           var $table = opt.dom.find("table");
	           if($table) $table.remove();
	           $table = null;
	       };
	       draw();
	       if(opt.input){
               opt.dom.find('tbody').on('dblclick', function(e){
                   var $target = $(e.target);
                   var tStr = $target.text();
                   $target.empty();
                   $target.append('<input value="' + tStr + '"/>');
               }).on('click', function(e){
                   if($(e.target).is('input')){return;}
                   opt.dom.find('tbody input').each(function(i, j){
                       $(this).parent().append($(this).val());
                       $(this).remove();
                   });
               });
	       }

	       return {
	           update: function(option){
	               clearDraw();
	               opt = $.extend({
	                   fdata: []
	               }, option);
	               draw();
	           }
	       };
	   },
	   
	   drawRichEdit: function(opt){
	       opt = $.extend({
	           initStr: '可编辑文本区',
	           dom: null,
	           qnode: 'updateContent,user',
	           key: null,
               url: null,
               cb: null
	       }, opt);

	       if(!opt.dom){return;}
	       var $dom = opt.dom;
	       var $richEdit = $('<div class="rich-edit" contenteditable>' + opt.initStr + '</div>');
	       var $taps = $("<div class='ct-taps' style='width: 150px;'><button id='bold' class='ct-button'>bold</button><button id='warn' class='ct-button'>warn</button><button id='save' class='ct-button'>save</button></div>");
	       $dom.append($richEdit).append($taps);

	       var blur = function(){
	           $taps.css('display', 'none');
	       };

	       var focus = function(){
	           $taps.css('display', 'block');
	       };

	       $richEdit.focus(focus).blur(blur);

	       $dom.find('.ct-taps').on('mouseover', function(){
	           $richEdit.unbind('blur');
	       }).on('mouseout', function(){
	           $richEdit.bind('blur', blur);
	       }).on('click', function(e){
	           var $this = $(e.target);
	           var cid = $this.attr("id");
               switch (cid) {
               case 'bold': {
                   document.execCommand('bold', false, null);
                   break;
               }
               case 'warn': {
                   document.execCommand('forecolor', false, 'red');
                   break;
               }
               case 'save': {
                   $richEdit.bind('blur', blur);
                   $taps.css('display', 'none');
                   if(!opt.url){break;}
                   var content = $richEdit.html();
                   if(content.length>2000){$.alert("当前字数过多。");}
                   else{
                       _fns.ajax({
                           url: opt.url,
                           data: {
                               key: opt.key,
                               content: content,
                               qnode: opt.qnode
                           },
                           cb: function() {
                               $.alert("保存成功。");
                           }
                       });
                   }
                   if(opt.cb){cb()};
                   break;
               }
               }
	       });
	   },

	   //可编辑文本区
	   drawCustomText: function(opt, _fns){
	       opt = $.extend({
	           initStr: '可编辑文本区',
	           dom: null,
	           key: null,
	           url: null,
	           cb: null,
	           qnode: 'updateContent,user'
	       }, opt);

	       if (!opt.dom) {
	           return;
	       }
	       if (Array.isArray(opt.initStr)) {
	           $.each(opt.initStr, function(i, j) {
	               _fns.drawCustomText({
	                   initStr: j,
	                   dom: opt.dom,
	                   url: opt.url,
	                   key: opt.key,
	                   cb: opt.cb,
	                   qnode: opt.qnode
	               }, _fns);
	           });
	           return;
	       }

	       var selObj, range, selStr;
	       var div = $("<div class='customText'></div>");
	       var span = $("<span class='ct-text'>" + opt.initStr + "</span>");
	       var input = $("<input class='ct-input' type='text' />");
	       var taps = $("<div class='ct-taps'>\
	                       <a id='edit' class='ct-button'>Edit</a>\
	                       <a id='save' class='ct-button'>Save</a>\
	                   </div>");
	       opt.dom.append(div);
	       div.append(span).append(input).append(taps);

	       span.on("click", function() {
	           taps.css("display", "block");
	           if (selObj && selObj.toString() === "") div.find(".ct-taps #bold,#warn,#warn_bold").remove();
	       }).on("mouseleave", function() {
	           taps.css("display", "none");
	       }).on("mouseup", function(e) {
	           if (e.which === 1) {
	               selObj = window.getSelection();
	               range = selObj.getRangeAt(0);
	               if (div.find(".ct-taps a").length < 3)
	                   div.find(".ct-taps").append("<a id='bold' class='ct-button'>Bold</a>\
	               <a id='warn' class='ct-button'>Warn</a>\
	               <a id='warn_bold' class='ct-button'>W&B</a>");
	               selStr = selObj.toString();
	               if (selObj.toString() === "") div.find(".ct-taps #bold,#warn,#warn_bold").remove();
	           }
	       }).on("mousedown", function() {
	           if (selObj) selObj.removeAllRanges();
	       });

	       input.on("mouseenter", function() {
	           taps.css("display", "block");
	       }).on("keypress", function(e) {
	           if (e.keyCode == "13") _fns.drawCustomText({
	               dom: opt.dom,
	               url: opt.url,
	               key: opt.key,
	               cb: opt.cb,
	               qnode: opt.qnode
	           }, _fns);
	       });

	       taps.on("mouseenter", function() {
	           $(this).css("display", "block");
	       }).on("mouseleave", function() {
	           $(this).css("display", "none");
	       }).on("click", function(e) {
	           var $this = $(e.target);
	           var cid = $this.attr("id");
	           switch (cid) {
	               case "edit":
	                   {
	                       if (!$this.hasClass("active")) {
	                           input.css("display", "block").val(span.text()).focus();
	                           span.css("display", "none");
	                           $this.addClass("active");
	                           div.find(".ct-taps #save,#bold,#warn,#warn_bold").remove();
	                       } else {
	                           span.text(input.val()).css("display", "block");
	                           $this.removeClass("active");
	                           input.css("display", "none");
	                           div.find(".ct-taps").append("<a id='save' class='ct-button'>Save</a>");
	                       }
	                       break;
	                   }
	               case "bold":
	                   {
	                       var txt = range.extractContents().textContent;
	                       range.deleteContents();
	                       for (var i = txt.length; i > 0; i--) {
	                           var snode = document.createElement("span");
	                           $(snode).addClass("ct-bold");
	                           snode.innerHTML = txt.substring(i, i - 1);
	                           range.insertNode(snode);
	                       }

	                       div.find(".ct-taps #bold,#warn,#warn_bold").remove();
	                       break;
	                   }
	               case 'warn':
	                   {
	                       var txt = range.extractContents().textContent;
	                       range.deleteContents();
	                       for (var i = txt.length; i > 0; i--) {
	                           var snode = document.createElement("span");
	                           $(snode).addClass("ct-warn");
	                           snode.innerHTML = txt.substring(i, i - 1);
	                           range.insertNode(snode);
	                       }
	                       div.find(".ct-taps #bold,#warn,#warn_bold").remove();
	                       break;
	                   }
	               case 'warn_bold':
	                   {
	                       var txt = range.extractContents().textContent;
	                       range.deleteContents();
	                       for (var i = txt.length; i > 0; i--) {
	                           var snode = document.createElement("span");
	                           $(snode).addClass("ct-warn ct-bold");
	                           snode.innerHTML = txt.substring(i, i - 1);
	                           range.insertNode(snode);
	                       }
	                       div.find(".ct-taps #bold,#warn,#warn_bold").remove();
	                       break;
	                   }
	               case 'save':
	                   {
	                       if (!opt.url) {
	                           break;
	                       }
	                       var content = '';
	                       opt.dom.find('.customText .ct-text').each(function(i) {
	                           if(i == 0) content = $(this).html();
	                           else content = content + "##" + $(this).html();
	                       });
	                       if(content.length>650){
	                    	   $.alert("当前字数过多。");
	                       }else{
	                       _fns.ajax({
	                           url: opt.url,
	                           data: {
	                               key: opt.key,
	                               content: content,
	                               qnode: opt.qnode
	                           },
	                           cb: function() {
	                               $.alert("保存成功。");
	                           }
	                       })
	                       }
	                       if (opt.cb) cb();
	                       break;
	                   }
	           }
	           $.each(span.find(".ct-warn,.ct-bold"), function(i, j) {
	               if (!$(j).text()) $(j).remove();
	           });
	       });
	   },
	   //进度条展示图(dom：要绑定到那个元素上；tandom：弹出层的元素；tdom弹出层表格元素这里需要字符串；data：数据集；keys：下面详解；title：左侧标题；cb：可以自己写点弹出层事件代替默认；tableopt：默认弹出层中的table参数)
	   //key详解：name:节点名称，status:节点状态，date：节点日期，flag1当前进度（没有不要填），flag2：应完成的进度（没有不要填）,sdate开始执行日期，days:消耗天数
	   drawProgress: function(opt){
	       opt = $.extend({
	           dom: null,
	           tandom: null,
	           tdom: null,
	           data: [],
	           keys: {head: 'head', status: 'status', date: 'date', sdate: 'sdate', days: 'days'},
	           title: '',
	           cb: null,
	           tableOpt: null
	         }, opt);
	         if(!opt.data.length || !opt.dom || !opt.keys){return;}
             var $tdom = opt.tdom;
	         var drawNode = function(data, keys, index, last){
	           var node = '<div class="p-node">' +
	               '<p>' + (data[keys.name]?data[keys.name]:'N/A') + '</p>' +
	               '<div val-data="' + index + '" class="pn-circle ' + (data[keys.status]?'finished':'unfinished') + '"></div>' +
	               '<div class="pn-line"></div>' +
	               (data.hasOwnProperty(keys.flag1)?'<div class="finishing"></div>':'') +
	               (data.hasOwnProperty(keys.flag2)?'<div class="plan"></div>':'') +
	               (last?'<div class="triangle-right"></div>':'') +
	               '<p class="pn-date">' + (data[keys.date]?data[keys.date]:'*月*日') + '</p>' +
	               '</div>';
	           return node;
	         };

	         var $panel = $('<div class="panel"></div>');
	         var $title = $('<div class="progress-title">' + opt.title + '</div>')
	         var $progress = $('<div class="progress"></div>');
	         $panel.append($progress);
	         var dl = opt.data.length;
	         var _fns = this;
	         $progress.css('width', dl * 117 + 'px');
	         $.each(opt.data, function(i, j){
	             $progress.append(drawNode(j,opt.keys, i, dl == (i + 1)));
	         });

	         opt.dom.append($title).append($panel);

	         var dragging = false;
	         var iX;
	         if(opt.tandom){opt.tandom.hdialog();}
	         $progress.on('mousedown', function(e){
	             dragging = true;
	             iX = e.clientX - this.offsetLeft;
	             return false;
	         });
	         $progress.on('mousemove', function(e){
	             if(!dragging){return false;}
	             var e = e || window.event;
	             var oX = e.clientX - iX;
	             if(oX >= 0 || oX <= $(this).parent().width() - $(this).width() - 40){return false;}
	             $(this).css({'left': oX + 'px'});
	             return false;
	         });
	         $('body').on('mouseup', function(e){
	             dragging = false;
	         });
	         opt.dom.find('.pn-circle').on('click', function(e){
	             var index = $(this).attr("val-data");
	             var ndata = opt.data[index];
	             if(typeof opt.cb === 'function'){cb(opt.data, ndata, index);return;}
	             var $tandom = opt.tandom;
	             if(!$tandom || !opt.tableOpt) return;
	             $tandom.find('.hbody,.hhead').css({'background-color': '#dedede'}).removeClass('hhead');
	             //填充信息
	             _fns.hform($tandom.find('.p-tc-panel'), ndata);
	             //设置 title属性和完成未完成状态
	             $tandom.find('.p-tc-panel span').each(function(i){
	                 var tdt = ndata[$(this).attr("name")];
	                 $(this).attr("title", tdt);
	                 if(i == 1 && tdt == 1) $(this).html('完成');
	                 else if(i == 1 && tdt == 0) $(this).html('未完成');
	             });
	             $tandom[0].hd.open();
	             if(ndata.hasOwnProperty('node_id')){opt.tableOpt.data.nodeid = ndata.node_id;}
//	             $(opt.tdom).htable(opt.tableOpt);
	             $tandom.find(opt.tdom).htable(opt.tableOpt);
	         });
	   },
	   //块形转化率图
	   blockTransform : function(opt){
	       opt = $.extend({
			   dom : null,				//容器
			   data : null,				//数据源
			   resultKey : 'result',	//数据源读取的key
			   titles : [],				//每块的标题
			   name : '',				//名称
			   numKey : '',				//值
			   rateKey : '',			//占比
			   trend : '',				//趋势值
			   transRateKey : '', 		//转化率
			   name2 : '',				//下面块的name
			   num2Key : '',			//下面块的key
		   }, opt);
		   if(!opt.dom.length || !opt.data || !opt.data[opt.resultKey] || !opt.titles.length){return;}
		   var wd = opt.dom.attr("width");
		   var width = wd ? Number(wd)  :opt.dom.width() - 20;//容器总宽度
		   if(!wd){opt.dom.attr("width", width);}
		   var len = opt.titles.length;
		   var blockWidth = width/((len - 1) * 0.68 +len);	//块宽度
		   var gapWidth = blockWidth * 0.68;				//间隙宽度
		   var h = 150;										//块100%高度
		   var colors = function(eq){
		       var color = Highcharts.getOptions().colors;
		       if(eq > 10){eq = eq%11;}
		       return color[eq];
		   };
		   var $box = $('<div class="block-trans"></div>');
		   $.each(opt.titles, function(i, j){
		   		var hh = h*opt.data[opt.resultKey][i][opt.rateKey]/100;
		   		var scolor = hh < 15 ? ' style="color:#333333;"' : '';
		   		var transRateKeyData = typeof opt.format.transRateKey === 'function' ? opt.format.transRateKey(opt.data[opt.resultKey][i][opt.transRateKey]) : (opt.data[opt.resultKey][i][opt.transRateKey]+'%');
		   		var gapStr = i ? ('<div class="br-gaps" style="width:'+gapWidth+'px;">'+transRateKeyData+'</div>') : '';
		   	    //var blockStr = '<div class="br-blocks" num="'+i+'" style="width:'+blockWidth+'px;"><div class="br-title">'+j+'</div><div class="br-vk"><div class="br-v">'+opt.name+'</div><div class="br-k">'+opt.data[opt.resultKey][i][opt.numKey]+'</div></div><div class="br-rate" style="background-color:'+colors(i)+';height:'+hh+'px;"><span'+scolor+'>'+opt.data[opt.resultKey][i][opt.rateKey]+'%</span></div></div>';
		   	    var trendStr = opt.trend ? '<div class="br-trend trend">{'+opt.trend+',trend}</div>' : '';
		   		var numKeyStr = opt.numKey ? '<div class="br-k max" title="{'+opt.numKey+',numKey}">{'+opt.numKey+',numKey}</div>' : '';
		   		var num2KeyStr = (opt.num2Key && typeof(opt.data[opt.resultKey][i][opt.num2Key]) === 'number') ? '<div class="br-num2"><h2>'+($.isArray(opt.name2) ? opt.name2[i] : opt.name2)+'</h2><div class="br-n2-v">{'+opt.num2Key+',num2Key}</div></div>' : '';
		   		var blockStr = htemplate( '<div class="br-blocks" num="'+i+'" style="width:'+blockWidth+'px;"><div class="br-title max" title="'+j+'">'+j+'</div><div class="br-vk"><div class="br-v max" title="'+($.isArray(opt.name) ? opt.name[i] : opt.name)+'">'+($.isArray(opt.name) ? opt.name[i] : opt.name)+'</div>'+numKeyStr+trendStr+'</div><div class="br-rate" style="background-color:'+colors(i)+';height:'+hh+'px;"><span'+scolor+'>{'+opt.rateKey+',rateKey}</span></div>'+num2KeyStr+'</div>', opt.data[opt.resultKey][i], opt.format || {} );
		   	    $box.append(gapStr + blockStr);
		   });
		   opt.dom.html($box);
		   if(typeof opt.clickCb === 'function'){
	   			opt.dom.children(".block-trans").children(".br-blocks").addClass("pointer");
	   			$box.off().on("click", ".br-blocks", function(){
	   				opt.clickCb(opt);
	   			});
	   	   }

	   },

	   //初始化函数
	   doInit : function(){
		   var  _fns = this;
		   //全局事件
		   //TAB切换
		   $(document).on("click", ".tb-tab>li", function(){
			   var tid = $(this).attr("link");
			   if($(this).hasClass("hb-tab-se") || !tid){return;}
			   $(this).addClass("hb-tab-se");
			   var $self = $(this);
			   var $box = $(this).closest(".hcy-tex");
			   $(this).siblings().each(function(){
				   $(this).removeClass("hb-tab-se");
				   var idd = $(this).attr("link");
				   if(idd){
					   $box.find(idd).hide();
				   }
			   });
			   $box.find(tid).show();
			   $box = $self = null;

		   //弹层消失
		   }).on("click", "#zzbg", function(e){
			   var data = $(this).data("data");
			   if (data) {
				if (data[0]) {
					data.hide();
				}
			}
			$(this).hide().data("data","");
		   });

		   //resize
		   $(window).resize(function(){
			   HCY.renderCb();
		   });

		   //注册console.log
		   if (typeof(window.console) == "undefined"){
			   console = {};
			   console.log = function(){};
		   }

		   //设highcharts全局颜色
		   Highcharts.setOptions({
			    lang: {
		            numericSymbols: [' K', ' M' ,' G']
		        },
		        colors: ['#68b4ec', '#ed376d', '#ff8040', '#10b688', '#f46464', '#ba70c2', '#19bab3', '#ff8040', '#5a55a0', '#68b4ec', '#ed376d']
		   });

		   //币种设置
		   var cys = {
		      cny : '币种 CNY',
		      hkd : '币种 HKD',
		      usd : '币种 USD'
		   };
		   var eq = (function(){
			   var q;
			   $.each(_config.currency, function(i, j){
				   if(String.prototype.indexOf.call(['',j,''],',' + _config.AK + ',') > -1){
					   q = i;
					   return false;
				   }
			   });
			   return q;
		   })();
		   if(eq && cys[eq]){
			   $("#currency>span").text(cys[eq]).parent().show()[0].className = 'currency ' + eq;
		   }



	   }//end doInit

	};//end return
});
